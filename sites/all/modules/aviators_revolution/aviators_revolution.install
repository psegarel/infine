<?php

/**
 * Implements hook_schema()
 * @return array
 */
function aviators_revolution_schema() {
  $schema = array();

  $schema['aviators_revolution_slider'] = array(
    'description' => 'Infine feature color scheme',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'attributes' => array(
        'type' => 'blob',
        'size' => 'normal',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['aviators_revolution_slide'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'slider_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'attributes' => array(
        'type' => 'blob',
        'size' => 'normal',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['aviators_revolution_component'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'slide_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'text',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'attributes' => array(
        'type' => 'blob',
        'size' => 'normal',
      )
    ),
    'primary key' => array('id'),
  );


  $schema['aviators_revolution_component_type'] = array(
    'description' => 'Stores information about all defined gbook types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique gbook type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable type of this gbook type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this gbook type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this gbook type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this {type} type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

function aviators_revolution_update_7001() {
  $schema = aviators_revolution_schema();

  foreach ($schema as $table_name => $table) {
    if (!db_table_exists($table_name)) {
      db_create_table($table_name, $table);
    }
  }
}


function aviators_revolution_update_7002() {
  $def = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => 'text',
  );

  if (!db_field_exists('aviators_revolution_component', 'type')) {
    db_add_field('aviators_revolution_component', 'type', $def);
  }
}

function aviators_revolution_update_7003() {
  $schema = aviators_revolution_schema();

  foreach ($schema as $table_name => $table) {
    if (!db_table_exists($table_name)) {
      db_create_table($table_name, $table);
    }
  }
}

function aviators_revolution_update_7004() {
  if (!db_field_exists('aviators_revolution_slide', 'fid')) {
    db_add_field(
      'aviators_revolution_slide',
      'fid',
      array(
        'type' => 'int',
        'unsigned' => TRUE,
      )
    );
  }
}

function aviators_revolution_update_7005() {
  if (!db_field_exists('aviators_revolution_slider', 'attributes')) {
    db_add_field(
      'aviators_revolution_slider',
      'attributes',
      array(
        'type' => 'blob',
        'size' => 'normal',
      )
    );
  }
}
